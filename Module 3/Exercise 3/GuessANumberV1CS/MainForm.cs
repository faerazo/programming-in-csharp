//MainForm.cs
//Code Example by Farid Naisan
//Created:  2015-11-04
//This calss gandles all user interactions and uses an object of the
//GuessNumber class to play the guess-a-number game.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace GuessANumberV1CS
{
    //We declare and create an object of the GuessNumber and name it
    //gameOb.  The variable gameObj will be the object that will
    //provide us with all services and information defined in the  GuessNumber class.

    public partial class MainForm : Form
    {
        //FIELDS
        //let max number of attempts be a constant - can be user-given in the future
        private const int maxNumOfAttemptsAllowed = 7;

        //The object that is made of the GuessNumber class.  
        private GuessNumber gameObj;  //referene variable - object not yet created.

        //The method below is the constructor of the MainForm class.
        //The constructor is automatically called when MainForm object is been creted 
        //from the MainMethod (all prepared and done by VS).
        public MainForm()
        {
            //Don't touch this method call - generated by VS
            InitializeComponent();

            //From here on is my code.
            //Create the game object
            gameObj = new GuessNumber();

            //Do other initiations
            InitializeGUI();
        }

        private void InitializeGUI()
        {
            grpPlay.Enabled = false;
            btnStart.Enabled = true;
            //new game must start first
            lblAttempts.Text = string.Empty;
            btnStart.Text = "Start New Game";
            lblResult.Text = string.Format("You have {0} lives!",  maxNumOfAttemptsAllowed);

        }
        //Every time the user clicks the Start New Game button, this method gets executed.
        //The start button is disabled
        //The play groupbox is enabled.
        //The input and output controls are cleaned from previous game values.
   
        private void btnStart_Click(object sender, EventArgs e)
        {
            btnStart.Enabled = false;
            grpPlay.Enabled = true;
            txtNumber.Text = string.Empty;
            lblResult.Text = string.Empty;
            lblAttempts.Text = string.Empty;
            StartGame();
        }

        /// <summary>
        /// Method to start the game,
        /// To do: 
        /// 1.  Create a new GuessNumber object 
        ///     (alternative, reset the current obj).
        /// 2.  ReadInput from the GUI
        /// 3.  Set input that is to be saved in the game
        /// 3.  Start the game
        /// </summary>
        /// <remarks></remarks>

        private void StartGame()
        {
            
            //create a game object
            gameObj = new GuessNumber();

            //Input to the game is maxNumOfAttempts
            gameObj.SetMaxattempts(maxNumOfAttemptsAllowed);

            //start the game
            gameObj.NewGame();

            lblAttempts.Text = gameObj.GetMaxAttempts().ToString();
        }
		//Every time the user clicks the OK button, this method gets executed.
		//Sender: is the object that notifies about the clicking, here it is
		//the btnOK button.  The parmeter e is a structure that contains 
		//information about the clicking (whether right or left button is used)
		//TO DO:
		//Your job: Create a ReadInput method and call it from
		//this method.private 		
		private void btnOk_Click (object sender, EventArgs e)
		{
            //1.  ReadInput (user's guessed number)
            //2.  Send the number to the game to check the result
            //    if the result is 0 or number attemps left is 0,
            //    finish the game

            //1. ReadInput
            int userNum = 0;  //a container for receive an output (number)
            bool numberOK = ReadUsersGuess(out userNum);
            
            //check so the input has been validated
            if (!numberOK)  //same to write if (numberOK == false)
            {
                return;      //Cancel execution due to error in input
            }
            //if executtion is not canceled by the above return
            //we continue with the game
            CheckUserGuess(userNum);
        }


        /// <summary>
        /// Using the game object controls the user's guess with the 
        /// computer's chosen number
        /// </summary>
        /// <param name="userNum">User's given number.</param>
        private void CheckUserGuess(int userNumber)
        {
            string message = string.Empty; //to receive and store message from the game obj

            int result  = gameObj.CheckTheGuessedNumber(userNumber);
            int attemptsLeft = gameObj.GetNumberOfAttemptsLeft();
            bool success = false;

            if (result == 0)
            {
                success = true;
                message = "Congratulations! You guessed it correctly!";
             }
            else if (result < 0)
                message = "Too low!";
            else if (result > 0)
                message = "Too high!";
            else
                message = "Internal error - kill the programmer!";
             
            if ((!success) && (attemptsLeft == 0))
            {
                int chosenNumber = gameObj.GetChosenNumber();
                message += ", but unfortunately no more lives left!";
                message += Environment.NewLine + "Game over!";
                message += Environment.NewLine + "The number was: " + chosenNumber.ToString();
            }

            lblAttempts.Text = attemptsLeft.ToString();     //string representation of the integer
            lblResult.Text = message;    //Both sides of same type (string) - no conversion needed           

            //check if game is over
            if ((result == 0) || (attemptsLeft == 0))
            {
                 btnStart.Enabled = true;
                 grpPlay.Enabled = false;         
             }
        }

        /// <summary>
        /// Read the contents of the textbox in which the user writes a value. The conent is a 
        /// text and must be converted to an integer.
        /// It should then be checked so it is between 0 and 100
        /// </summary>
        /// <param name="number">The converted number</param>
        /// <returns>True if the conversion is successfull, otherwise false</returns>
        /// <remarks>out tells the method that the number should be sent back to the user.</remarks>
        private bool ReadUsersGuess(out int number)
        {
            number = 0;
            if (!int.TryParse(txtNumber.Text, out number))
            {
                MessageBox.Show("Please give a valid integer", "Error");
                return false;
            }
            else
            {
                //Number is a valid number and the caller can use it.
                return true;
            }
        }
    }
}

//Code Example
//Created:  2014-11-01 by Farid Naisan

// This class uses handles a guess-a-number game. t generates a number between 0 and 100 and 
// has methods to check if the user a given number matches the random number, and to provide 
// other information required.
//NOTE:  THE OBJECTS OF THIS CLASS DO NOT KNOW WHICH OTHER OBJECTS ARE USING THEM. 
//IT RECEIVES INPUT AND PRODUCES OUTPUT.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GuessANumberV1CS
{
    //In this class, a random number is generated by the help of the Random class in
    //.NET Class Lib.  The class handles all related actions.
    //Random is generates an arbitrary random number
    //Accordig to the documentations, tt is better to create one object to create one 
    //Random object to generate many random numbers, instead of creating a new object everytime 
    //a new random number is needed.  For detailed specifications, see the following link:
    //https://msdn.microsoft.com/en-us/library/system.random(v=vs.110).aspxpublic 
    class GuessNumber
    {
        // FIELDS (OR INSTANCE VARIABLES OR ATTRIBUTES)
        //Fields needed internall
        private Random randObj; //Create a Random generator object     
        private int randomNumber;   //generated number for user to guess

        //Fields needed for saving input
        private int maxAttempts;       
       
        //Fields needed for saving output (try to keep at minimum)
        private int attemptsUsed = 0;   //current attemps


        /// <summary>
        /// Constructor: has same name as the class and no return type! Is called automatic when
        /// an object of the class is being created (with new)
        /// Do all initiations, and if you use an object as a field (randObj)
        /// create the object with new here.
        /// 1. Create an object of Random and save in rndObj
        /// 2. Do other necessary initiations
        /// </summary>

        public GuessNumber()
        {
            //generate a random number
            randObj = new Random();
           
        }
        /// <summary>
        /// Start a new game, generate a new random number
        /// Reset output variables
        /// </summary>
        public void NewGame()
        {
            attemptsUsed = 0; //reset output variable
            //call the method that generates a random number between 0 and 100
            randomNumber = GetARandomNumber(0, 100);
        }
        //GETTER and SETTER methods
        /// <summary>
        /// Getter method giving READ-ONLYaccess to the value of the instance 
        /// variable maxAttempts
        /// </summary>
        /// <returns>Returns the value saved in the variable maxAttempts.</returns>
        public int GetMaxAttempts()
        {
            return maxAttempts;
        }

        /// <summary>
        /// Setter method giving WRITE-ONLY access to the value of the instance
        /// viable maxAttempts.
        /// </summary>
        /// <param name="newValue"The variable maxAttempts is assigned a new value.</param>
        public void SetMaxattempts(int newValue)
        {
            if (newValue >= 0)
                maxAttempts = newValue;
        }


        /// <summary>
        /// Getter for output - no setter needed
        /// Calculate the number of attempt left
        /// </summary>
        /// <returns>Return number of attempts left.</returns>
        public int GetNumberOfAttemptsLeft()
        {
            return maxAttempts - attemptsUsed;
        }

        /// <summary>
        /// Getter for the random number
        /// </summary>
        /// <returns>the chosen number!</returns>
        public int GetChosenNumber()
        {
            return randomNumber;
        }
        /// <summary>
        /// Compare a given number with the random number
        /// 
        /// </summary>
        /// <param name="userNum">Input: The number to compare with the generatedramdom num.</param>
        /// <returns>
        /// -1 if the number is lower 
        /// 0  if the number is equal
        /// +1 if the number is higher
        ///.</returns>
        public int CheckTheGuessedNumber(int userNum)
        {
            int result = 0;  //initiation 

            if (userNum < randomNumber)
            {
                result = -1;
            }
            else if (userNum > randomNumber)
            {
                result = 1;
            }
            attemptsUsed++;  //one more attemp consumed
            //return result, 1 or -1 from if-else, or 0 from initiation.
            return result;
        }

        /// <summary>
        /// Generate a new random number betweeen min and max, inclusive these limits.
        /// </summary>
        /// <param name="min">The lower limit.</param>
        /// <param name="max">The upper limit</param>
    /// <returns>The generated number</returns>
        private int GetARandomNumber(int min, int max)
        {
            //randObj.Next returns a value between min max, inclusive min BUT exclusive max
            int number = randObj.Next(min, max + 1);
            return number;
        }


        
    }//end of class
 } //end of namespace
